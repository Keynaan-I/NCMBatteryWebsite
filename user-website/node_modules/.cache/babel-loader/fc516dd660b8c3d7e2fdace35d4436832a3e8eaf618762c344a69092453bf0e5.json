{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\jatos_win_java\\\\study_assets_root\\\\Custom Website\\\\user-website\\\\src\\\\FormSettings.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { StroopWord_Default } from \"./configFiles/StroopWord_Setup\";\nimport { StroopColorWord_Default } from \"./configFiles/StroopColorWord_Setup\";\nimport { StroopColor_Default } from \"./configFiles/StroopColor_Setup\";\n\n//--------------------------------------------------------------\n// function FormSettings({ selectedItems, saveFormSettings }) {\n//   const { formName, id } = useParams(); // Get form name and unique ID from URL\n//   const navigate = useNavigate();\n\n//   // Find the current form from the selected items, or initialize a new form\n//   const form = selectedItems.find((item) => item.id === id) || {\n//     id,\n//     name: formName,\n//     imgSrc:\"\",\n//     settings: { param1: \"\", param2: \"\" },\n//   };\n\n//   const [formData, setFormData] = useState(form);\n\n//   // Handle input changes\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({\n//       ...formData,\n//       settings: {\n//         ...formData.settings,\n//         [name]: value,\n//       },\n//     });\n//   };\n\n//   // Save settings and navigate back to the home page\n//   const handleSave = () => {\n//     saveFormSettings(formData);\n//     navigate(\"/\");\n//   };\n\n//   // Different fields based on the form type\n//   const renderFormFields = () => {\n//     switch (formData.name) {\n//       case \"Intake Form\":\n//         return (\n//           <>\n//             <label>\n//               Age:\n//               <input\n//                 type=\"number\"\n//                 name=\"age\"\n//                 value={formData.settings.age || \"\"}\n//                 onChange={handleChange}\n//               />\n//             </label>\n//             <br />\n//             <label>\n//               Gender:\n//               <select\n//                 name=\"gender\"\n//                 value={formData.settings.gender || \"\"}\n//                 onChange={handleChange}\n//               >\n//                 <option value=\"\">Select...</option>\n//                 <option value=\"Male\">Male</option>\n//                 <option value=\"Female\">Female</option>\n//                 <option value=\"Other\">Other</option>\n//               </select>\n//             </label>\n//             <br />\n//             <label>\n//               Notes:\n//               <textarea\n//                 name=\"notes\"\n//                 value={formData.settings.notes || \"\"}\n//                 onChange={handleChange}\n//               />\n//             </label>\n//           </>\n//         );\n//       case \"Color\":\n//         return (\n//           <>\n//             <label>\n//               Color Type:\n//               <select\n//                 name=\"colorType\"\n//                 value={formData.settings.colorType || \"\"}\n//                 onChange={handleChange}\n//               >\n//                 <option value=\"\">Select...</option>\n//                 <option value=\"Red\">Red</option>\n//                 <option value=\"Blue\">Blue</option>\n//                 <option value=\"Green\">Green</option>\n//                 <option value=\"Yellow\">Yellow</option>\n//               </select>\n//             </label>\n//             <br />\n//             <label>\n//               Intensity (1-10):\n//               <input\n//                 type=\"range\"\n//                 min=\"1\"\n//                 max=\"10\"\n//                 name=\"intensity\"\n//                 value={formData.settings.intensity || 5}\n//                 onChange={handleChange}\n//               />\n//             </label>\n//           </>\n//         );\n//       case \"Word\":\n//         return (\n//           <>\n//             <label>\n//               Word List:\n//               <textarea\n//                 name=\"wordList\"\n//                 value={formData.settings.wordList || \"\"}\n//                 onChange={handleChange}\n//               />\n//             </label>\n//           </>\n//         );\n//       case \"Color/Word\":\n//         return (\n//           <>\n//             <label>\n//               Color Type:\n//               <select\n//                 name=\"colorType\"\n//                 value={formData.settings.colorType || \"\"}\n//                 onChange={handleChange}\n//               >\n//                 <option value=\"\">Select...</option>\n//                 <option value=\"Red\">Red</option>\n//                 <option value=\"Blue\">Blue</option>\n//                 <option value=\"Green\">Green</option>\n//                 <option value=\"Yellow\">Yellow</option>\n//               </select>\n//             </label>\n//             <br />\n//             <label>\n//               Word List:\n//               <textarea\n//                 name=\"wordList\"\n//                 value={formData.settings.wordList || \"\"}\n//                 onChange={handleChange}\n//               />\n//             </label>\n//           </>\n//         );\n//       default:\n//         return <p>No specific settings for this form.</p>;\n//     }\n//   };\n\n//   return (\n//     <div className=\"form-settings\">\n//       <h2>{formData.name} Settings</h2>\n//       {renderFormFields()}\n//       <br />\n//       <button onClick={handleSave}>Save</button>\n//     </div>\n//   );\n// }\n\n// export default FormSettings;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FormSettings({\n  selectedItems,\n  saveFormSettings\n}) {\n  _s();\n  const {\n    formName,\n    id\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Select the correct default configuration based on the form name\n  const getDefaultConfig = formName => {\n    switch (formName) {\n      // case \"Word\":\n      //   return StroopWord_Default;\n      // case \"Color\":\n      //   return StroopColor_Default;\n      // case \"Intake Form\":\n      //   return IntakeForm_Default;\n      case \"Color/word\":\n        return StroopColorWord_Default;\n      default:\n        return {};\n    }\n  };\n\n  // Set the default configuration as initial data\n  const defaultSettings = getDefaultConfig(formName);\n  const initialData = {\n    id,\n    name: formName,\n    settings: defaultSettings\n  };\n  const [formData, setFormData] = useState(initialData);\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    setFormData({\n      ...formData,\n      settings: {\n        ...formData.settings,\n        [name]: type === \"checkbox\" ? checked : value\n      }\n    });\n  };\n  const handleSave = () => {\n    saveFormSettings(formData);\n    navigate(\"/\");\n  };\n  const renderFormFields = () => {\n    return Object.entries(formData.settings).map(([key, value]) => {\n      if (typeof value === \"boolean\") {\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [key, \":\", /*#__PURE__*/_jsxDEV(\"select\", {\n            name: key,\n            value: formData.settings[key] ? \"true\" : \"false\",\n            onChange: e => handleChange({\n              target: {\n                name: key,\n                value: e.target.value === \"true\",\n                type: \"checkbox\"\n              }\n            }),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"true\",\n              children: \"True\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"false\",\n              children: \"False\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this);\n      } else if (typeof value === \"number\") {\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [key, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: key,\n            value: formData.settings[key],\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this);\n      } else if (Array.isArray(value)) {\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [key, \" (comma-separated values):\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: key,\n            value: formData.settings[key].join(\", \"),\n            onChange: e => handleChange({\n              target: {\n                name: key,\n                value: e.target.value.split(\",\").map(val => val.trim())\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [key, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: key,\n            value: formData.settings[key] || \"\",\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-settings\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [formName, \" Settings\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), renderFormFields(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n}\n_s(FormSettings, \"gbIcUHaf6PLJdKqXX4+Kav/7utU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = FormSettings;\nexport default FormSettings;\nvar _c;\n$RefreshReg$(_c, \"FormSettings\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","StroopWord_Default","StroopColorWord_Default","StroopColor_Default","jsxDEV","_jsxDEV","FormSettings","selectedItems","saveFormSettings","_s","formName","id","navigate","getDefaultConfig","defaultSettings","initialData","name","settings","formData","setFormData","handleChange","e","value","type","checked","target","handleSave","renderFormFields","Object","entries","map","key","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","join","split","val","trim","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Downloads/jatos_win_java/study_assets_root/Custom Website/user-website/src/FormSettings.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport {StroopWord_Default} from \"./configFiles/StroopWord_Setup\";\r\nimport {StroopColorWord_Default} from \"./configFiles/StroopColorWord_Setup\";\r\nimport {StroopColor_Default} from \"./configFiles/StroopColor_Setup\";\r\n\r\n\r\n\r\n//--------------------------------------------------------------\r\n// function FormSettings({ selectedItems, saveFormSettings }) {\r\n//   const { formName, id } = useParams(); // Get form name and unique ID from URL\r\n//   const navigate = useNavigate();\r\n\r\n//   // Find the current form from the selected items, or initialize a new form\r\n//   const form = selectedItems.find((item) => item.id === id) || {\r\n//     id,\r\n//     name: formName,\r\n//     imgSrc:\"\",\r\n//     settings: { param1: \"\", param2: \"\" },\r\n//   };\r\n\r\n//   const [formData, setFormData] = useState(form);\r\n\r\n//   // Handle input changes\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({\r\n//       ...formData,\r\n//       settings: {\r\n//         ...formData.settings,\r\n//         [name]: value,\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   // Save settings and navigate back to the home page\r\n//   const handleSave = () => {\r\n//     saveFormSettings(formData);\r\n//     navigate(\"/\");\r\n//   };\r\n\r\n//   // Different fields based on the form type\r\n//   const renderFormFields = () => {\r\n//     switch (formData.name) {\r\n//       case \"Intake Form\":\r\n//         return (\r\n//           <>\r\n//             <label>\r\n//               Age:\r\n//               <input\r\n//                 type=\"number\"\r\n//                 name=\"age\"\r\n//                 value={formData.settings.age || \"\"}\r\n//                 onChange={handleChange}\r\n//               />\r\n//             </label>\r\n//             <br />\r\n//             <label>\r\n//               Gender:\r\n//               <select\r\n//                 name=\"gender\"\r\n//                 value={formData.settings.gender || \"\"}\r\n//                 onChange={handleChange}\r\n//               >\r\n//                 <option value=\"\">Select...</option>\r\n//                 <option value=\"Male\">Male</option>\r\n//                 <option value=\"Female\">Female</option>\r\n//                 <option value=\"Other\">Other</option>\r\n//               </select>\r\n//             </label>\r\n//             <br />\r\n//             <label>\r\n//               Notes:\r\n//               <textarea\r\n//                 name=\"notes\"\r\n//                 value={formData.settings.notes || \"\"}\r\n//                 onChange={handleChange}\r\n//               />\r\n//             </label>\r\n//           </>\r\n//         );\r\n//       case \"Color\":\r\n//         return (\r\n//           <>\r\n//             <label>\r\n//               Color Type:\r\n//               <select\r\n//                 name=\"colorType\"\r\n//                 value={formData.settings.colorType || \"\"}\r\n//                 onChange={handleChange}\r\n//               >\r\n//                 <option value=\"\">Select...</option>\r\n//                 <option value=\"Red\">Red</option>\r\n//                 <option value=\"Blue\">Blue</option>\r\n//                 <option value=\"Green\">Green</option>\r\n//                 <option value=\"Yellow\">Yellow</option>\r\n//               </select>\r\n//             </label>\r\n//             <br />\r\n//             <label>\r\n//               Intensity (1-10):\r\n//               <input\r\n//                 type=\"range\"\r\n//                 min=\"1\"\r\n//                 max=\"10\"\r\n//                 name=\"intensity\"\r\n//                 value={formData.settings.intensity || 5}\r\n//                 onChange={handleChange}\r\n//               />\r\n//             </label>\r\n//           </>\r\n//         );\r\n//       case \"Word\":\r\n//         return (\r\n//           <>\r\n//             <label>\r\n//               Word List:\r\n//               <textarea\r\n//                 name=\"wordList\"\r\n//                 value={formData.settings.wordList || \"\"}\r\n//                 onChange={handleChange}\r\n//               />\r\n//             </label>\r\n//           </>\r\n//         );\r\n//       case \"Color/Word\":\r\n//         return (\r\n//           <>\r\n//             <label>\r\n//               Color Type:\r\n//               <select\r\n//                 name=\"colorType\"\r\n//                 value={formData.settings.colorType || \"\"}\r\n//                 onChange={handleChange}\r\n//               >\r\n//                 <option value=\"\">Select...</option>\r\n//                 <option value=\"Red\">Red</option>\r\n//                 <option value=\"Blue\">Blue</option>\r\n//                 <option value=\"Green\">Green</option>\r\n//                 <option value=\"Yellow\">Yellow</option>\r\n//               </select>\r\n//             </label>\r\n//             <br />\r\n//             <label>\r\n//               Word List:\r\n//               <textarea\r\n//                 name=\"wordList\"\r\n//                 value={formData.settings.wordList || \"\"}\r\n//                 onChange={handleChange}\r\n//               />\r\n//             </label>\r\n//           </>\r\n//         );\r\n//       default:\r\n//         return <p>No specific settings for this form.</p>;\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"form-settings\">\r\n//       <h2>{formData.name} Settings</h2>\r\n//       {renderFormFields()}\r\n//       <br />\r\n//       <button onClick={handleSave}>Save</button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n// export default FormSettings;\r\n\r\n\r\nfunction FormSettings({ selectedItems, saveFormSettings }) {\r\n  const { formName, id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  // Select the correct default configuration based on the form name\r\n  const getDefaultConfig = (formName) => {\r\n    switch (formName) {\r\n      // case \"Word\":\r\n      //   return StroopWord_Default;\r\n      // case \"Color\":\r\n      //   return StroopColor_Default;\r\n      // case \"Intake Form\":\r\n      //   return IntakeForm_Default;\r\n      case \"Color/word\":\r\n        return StroopColorWord_Default;\r\n      default:\r\n        return {};\r\n    }\r\n  };\r\n\r\n  // Set the default configuration as initial data\r\n  const defaultSettings = getDefaultConfig(formName);\r\n  const initialData = { id, name: formName, settings: defaultSettings };\r\n\r\n  const [formData, setFormData] = useState(initialData);\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      settings: {\r\n        ...formData.settings,\r\n        [name]: type === \"checkbox\" ? checked : value,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleSave = () => {\r\n    saveFormSettings(formData);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const renderFormFields = () => {\r\n    return Object.entries(formData.settings).map(([key, value]) => {\r\n      if (typeof value === \"boolean\") {\r\n        return (\r\n          <label key={key}>\r\n            {key}:\r\n            <select\r\n              name={key}\r\n              value={formData.settings[key] ? \"true\" : \"false\"}\r\n              onChange={(e) =>\r\n                handleChange({\r\n                  target: { name: key, value: e.target.value === \"true\", type: \"checkbox\" },\r\n                })\r\n              }\r\n            >\r\n              <option value=\"true\">True</option>\r\n              <option value=\"false\">False</option>\r\n            </select>\r\n          </label>\r\n        );\r\n      } else if (typeof value === \"number\") {\r\n        return (\r\n          <label key={key}>\r\n            {key}:\r\n            <input\r\n              type=\"number\"\r\n              name={key}\r\n              value={formData.settings[key]}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n        );\r\n      } else if (Array.isArray(value)) {\r\n        return (\r\n          <label key={key}>\r\n            {key} (comma-separated values):\r\n            <textarea\r\n              name={key}\r\n              value={formData.settings[key].join(\", \")}\r\n              onChange={(e) =>\r\n                handleChange({\r\n                  target: { name: key, value: e.target.value.split(\",\").map((val) => val.trim()) },\r\n                })\r\n              }\r\n            />\r\n          </label>\r\n        );\r\n      } else {\r\n        return (\r\n          <label key={key}>\r\n            {key}:\r\n            <input\r\n              type=\"text\"\r\n              name={key}\r\n              value={formData.settings[key] || \"\"}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-settings\">\r\n      <h2>{formName} Settings</h2>\r\n      {renderFormFields()}\r\n      <br />\r\n      <button onClick={handleSave}>Save</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormSettings;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,SAAQC,kBAAkB,QAAO,gCAAgC;AACjE,SAAQC,uBAAuB,QAAO,qCAAqC;AAC3E,SAAQC,mBAAmB,QAAO,iCAAiC;;AAInE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,YAAYA,CAAC;EAAEC,aAAa;EAAEC;AAAiB,CAAC,EAAE;EAAAC,EAAA;EACzD,MAAM;IAAEC,QAAQ;IAAEC;EAAG,CAAC,GAAGZ,SAAS,CAAC,CAAC;EACpC,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMa,gBAAgB,GAAIH,QAAQ,IAAK;IACrC,Q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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}